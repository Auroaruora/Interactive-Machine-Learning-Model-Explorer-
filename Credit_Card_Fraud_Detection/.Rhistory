split <- initial_split(data, prop = 0.7, strata = V16)
# Assign training and test sets again
train_data <- training(split)
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/testing.csv", header = TRUE)
# Redo the splitting if necessary, first ensure the factor level assignment in original data is correct
data$V16 <- factor(data$V16, levels = c("+", "-"), labels = c("Positive", "Negative"))
split <- initial_split(data, prop = 0.7, strata = V16)
# Redo the splitting if necessary, first ensure the factor level assignment in original data is correct
data$V16 <- factor(data$V16, levels = c("+", "-"), labels = c("Positive", "Negative"))
data <- read.csv("Credit_Card_Fraud_Detection/data/testing.csv", header = TRUE)
str(data)
data$V2 <- as.numeric(data$V2)
data$V16 <- factor(data$V16, levels = c("+", "-"),
labels = c("Positive", "Negative"))
View(data)
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/testing.csv", header = TRUE)
set.seed(1)
split <- initial_split(data, prop = 0.70, strata = "V16")   # 70%-30% split
View(data)
split <- initial_split(data, prop = 0.70, strata = "Target")   # 70%-30% split
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/testing.csv", header = TRUE)
set.seed(1)
split <- initial_split(data, prop = 0.70, strata = "Target")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
train_data$Target <- factor(train_data$Target, levels = c("+", "-"),
labels = c("Positive", "Negative"))
test_data$Target <- factor(test_data$Target, levels = c("+", "-"),
labels = c("Positive", "Negative"))
blueprint <- recipe(~., data = train_data) %>%
step_string2factor(all_nominal(), -all_outcomes())
blueprint %>% step_impute_knn(all_predictors())
blueprint %>% step_normalize(all_numeric_predictors())
blueprint <- blueprint %>% step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
blueprint<- blueprint%>%step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
transformed_test<-(bake(blueprint_prep, new_data = test_data))
View(transformed_test)
View(test_data)
View(transformed_train)
View(transformed_test)
View(transformed_train)
blueprint <- blueprint %>% step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
blueprint<- blueprint%>%step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
transformed_test<-(bake(blueprint_prep, new_data = test_data))
blueprint <- recipe(~., data = train_data) %>%
step_string2factor(all_nominal(), -all_outcomes())
blueprint <- recipe(~., data = train_data) %>%
step_string2factor(all_nominal(), -all_outcomes())
blueprint %>% step_impute_knn(all_predictors())
transformed_train<-(bake(blueprint_prep, new_data = train_data))
blueprint_prep <- prep(blueprint, training = train_data)
View(blueprint_prep)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
View(transformed_train)
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/testing.csv", header = TRUE)
set.seed(1)
split <- initial_split(data, prop = 0.70, strata = "Target")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
train_data$Target <- factor(train_data$Target, levels = c("+", "-"),
labels = c("Positive", "Negative"))
test_data$Target <- factor(test_data$Target, levels = c("+", "-"),
labels = c("Positive", "Negative"))
blueprint <- recipe(~., data = train_data) %>%
step_string2factor(all_nominal(), -all_outcomes())
blueprint %>% step_impute_knn(all_predictors())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
transformed_test<-(bake(blueprint_prep, new_data = test_data))
View(transformed_test)
View(transformed_test)
View(test_data)
View(transformed_test)
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/testing.csv", header = TRUE)
set.seed(1)
data$V2 <- as.numeric(data$V2)
data$V14 <- as.numeric(data$V14)
split <- initial_split(data, prop = 0.70, strata = "Target")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
train_data$Target <- factor(train_data$Target, levels = c("+", "-"),
labels = c("Positive", "Negative"))
test_data$Target <- factor(test_data$Target, levels = c("+", "-"),
labels = c("Positive", "Negative"))
View(test_data)
View(train_data)
View(test_data)
View(test_data)
View(train_data)
data(iris)
force(iris)
data(mtcars)
force(mtcars)
# Select the first 5000 entries
subset_data <- data[1:100, ]
# Load the necessary library
library(data.table)
# Read the CSV file
data <- read.csv("application_data.csv")
# Select the first 5000 entries
subset_data <- data[1:100, ]
# Save this subset to a new CSV file
write.csv(subset_data, "subset_application_data.csv", row.names = FALSE)
data(mtcars)
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/subset_application_data.csv", header = TRUE)
set.seed(1)
split <- initial_split(data, prop = 0.70, strata = "Target")   # 70%-30% split
train_data <- training(split)
View(data)
split <- initial_split(data, prop = 0.70, strata = "TARGET")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
train_data$TARGET <- factor(train_data$TARGET, levels = c("+", "-"),
labels = c("Positive", "Negative"))
test_data$TARGET <- factor(test_data$TARGET, levels = c("+", "-"),
labels = c("Positive", "Negative"))
blueprint <- recipe(~., data = train_data) %>%
step_string2factor(all_nominal(), -all_outcomes())
blueprint %>% step_impute_knn(all_predictors())
blueprint %>% step_normalize(all_numeric_predictors())
blueprint <- blueprint %>% step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
blueprint<- blueprint%>%step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
transformed_test<-(bake(blueprint_prep, new_data = test_data))
View(transformed_test)
View(transformed_train)
View(test_data)
View(test_data)
View(test_data)
View(train_data)
View(transformed_test)
View(test_data)
View(transformed_test)
View(test_data)
blueprint <- recipe(~., data = train_data) %>%
step_string2factor(all_nominal(), -all_outcomes()) %>%
step_impute_knn(all_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors()) %>%
step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train <- bake(blueprint_prep, new_data = train_data)
transformed_test <- bake(blueprint_prep, new_data = test_data)
View(transformed_test)
runApp('Credit_Card_Fraud_Detection')
runApp('Credit_Card_Fraud_Detection')
runApp('Credit_Card_Fraud_Detection')
runApp('Credit_Card_Fraud_Detection')
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/subset_application_data.csv", header = TRUE)
set.seed(1)
split <- initial_split(data, prop = 0.70, strata = "TARGET")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
train_data$TARGET <- factor(train_data$TARGET, levels = c("+", "-"),
labels = c("Positive", "Negative"))
test_data$TARGET <- factor(test_data$TARGET, levels = c("+", "-"),
labels = c("Positive", "Negative"))
# Start with the basic recipe
blueprint <- recipe(~., data = train_data)
# Manually add steps
blueprint <- add_step(blueprint, step_string2factor(all_nominal(), -all_outcomes()))
blueprint <- add_step(blueprint, step_impute_knn(all_predictors()))
blueprint <- add_step(blueprint, step_normalize(all_numeric_predictors()))
blueprint <- add_step(blueprint, step_center(all_numeric_predictors()))
# Start with the basic recipe
blueprint <- recipe(~., data = train_data)
# Manually add steps using add_step
blueprint <- add_step(blueprint, step_string2factor(all_nominal(), -all_outcomes()))
# Start with the basic recipe
blueprint <- recipe(~., data = train_data)
# Manually add steps using add_step
blueprint <- add_step(blueprint, step_string2factor(all_nominal(), -all_outcomes()))
# Initialize the recipe
blueprint <- recipe(TARGET ~ ., data = train_data)
# Manually add preprocessing steps
blueprint <- add_step(blueprint, step_string2factor(all_nominal(), -all_outcomes()))
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/subset_application_data.csv", header = TRUE)
set.seed(1)
split <- initial_split(data, prop = 0.70, strata = "TARGET")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
# Factorize the target variable
train_data$TARGET <- factor(train_data$TARGET, levels = c("+", "-"), labels = c("Positive", "Negative"))
test_data$TARGET <- factor(test_data$TARGET, levels = c("+", "-"), labels = c("Positive", "Negative"))
# Initialize the recipe
blueprint <- recipe(TARGET ~ ., data = train_data)
# Manually add preprocessing steps
blueprint <- add_step(blueprint, step_string2factor(all_nominal(), -all_outcomes()))
blueprint <- add_step(blueprint, step_impute_knn(all_predictors()))
blueprint <- recipe(~., data = train_data) %>%step_string2factor(all_nominal(), -all_outcomes())
blueprint %>% step_impute_knn(all_predictors())
blueprint <-blueprint %>% step_normalize(all_numeric_predictors())
blueprint <- blueprint %>% step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
blueprint<- blueprint%>%step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
blueprint <- recipe(~., data = train_data) %>%step_string2factor(all_nominal(), -all_outcomes())
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/subset_application_data.csv", header = TRUE)
set.seed(1)
split <- initial_split(data, prop = 0.70, strata = "TARGET")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
train_data$TARGET <- factor(train_data$TARGET, levels = c("+", "-"),
labels = c("Positive", "Negative"))
test_data$TARGET <- factor(test_data$TARGET, levels = c("+", "-"),
labels = c("Positive", "Negative"))
blueprint <- recipe(~., data = train_data) %>%step_string2factor(all_nominal(), -all_outcomes())
blueprint <-blueprint %>% step_impute_knn(all_predictors())
blueprint <-blueprint %>% step_normalize(all_numeric_predictors())
blueprint <- blueprint %>% step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
blueprint<- blueprint%>%step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
transformed_test<-(bake(blueprint_prep, new_data = test_data))
View(transformed_test)
View(transformed_test)
runApp('Credit_Card_Fraud_Detection')
runApp('Credit_Card_Fraud_Detection')
runApp('Credit_Card_Fraud_Detection')
runApp('Credit_Card_Fraud_Detection')
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/subset_application_data.csv", header = TRUE)
set.seed(1)
split <- initial_split(data, prop = 0.70, strata = "TARGET")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
train_data$TARGET <- factor(train_data$TARGET, levels = c("1", "0"))
test_data$TARGET <- factor(test_data$TARGET, levels = c("1", "0"))
blueprint <- recipe(~., data = train_data) %>%step_string2factor(all_nominal(), -all_outcomes())
blueprint <-blueprint %>% step_impute_knn(all_predictors())
blueprint <-blueprint %>% step_normalize(all_numeric_predictors())
blueprint <- blueprint %>% step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
blueprint<- blueprint%>%step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
transformed_test<-(bake(blueprint_prep, new_data = test_data))
View(transformed_train)
warnings()
blueprint <- recipe(~., data = train_data) %>%step_string2factor(all_nominal(), -all_outcomes())
blueprint <-blueprint %>% step_nzv(all_predictors())
blueprint <-blueprint %>% step_impute_knn(all_predictors())
blueprint <-blueprint %>% step_normalize(all_numeric_predictors())
blueprint <- blueprint %>% step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
blueprint<- blueprint%>%step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
transformed_test<-(bake(blueprint_prep, new_data = test_data))
warnings()
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/subset_application_data.csv", header = TRUE)
set.seed(1)
split <- initial_split(data, prop = 0.70, strata = "TARGET")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
train_data$TARGET <- factor(train_data$TARGET, levels = c("1", "0"))
test_data$TARGET <- factor(test_data$TARGET, levels = c("1", "0"))
blueprint <- recipe(~., data = train_data) %>%step_string2factor(all_nominal(), -all_outcomes())
blueprint <-blueprint %>% step_nzv(all_predictors())
blueprint <-blueprint %>% step_impute_knn(all_predictors())
blueprint <-blueprint %>% step_normalize(all_numeric_predictors())
blueprint <- blueprint %>% step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
blueprint<- blueprint%>%step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
transformed_test<-(bake(blueprint_prep, new_data = test_data))
library(shiny)
library(caret)
library(rpart) # For Decision Tree
library(randomForest) # For Random Forest
library(e1071) # For SVM
library(shinythemes)
library(shinycssloaders)
library(ggExtra)
library(data.table)
library(ggplot2)
library(dplyr)  # For data manipulation
library(recipes)
library(future)
library(shinycssloaders)
library(rsample)
library(tidymodels)
library(tidyverse)
setwd("/Users/auroraweng/Desktop/STAT3106 AML/FinalAML/")
data <- read.csv("Credit_Card_Fraud_Detection/data/subset_application_data.csv", header = TRUE)
set.seed(50)
split <- initial_split(data, prop = 0.70, strata = "TARGET")   # 70%-30% split
train_data <- training(split)
test_data <- testing(split)
train_data$TARGET <- factor(train_data$TARGET, levels = c("1", "0"))
test_data$TARGET <- factor(test_data$TARGET, levels = c("1", "0"))
blueprint <- recipe(~., data = train_data) %>%step_string2factor(all_nominal(), -all_outcomes())
blueprint <-blueprint %>% step_nzv(all_predictors())
blueprint <-blueprint %>% step_impute_knn(all_predictors())
blueprint <-blueprint %>% step_normalize(all_numeric_predictors())
blueprint <- blueprint %>% step_center(all_numeric_predictors()) %>%
step_scale(all_numeric_predictors())
blueprint<- blueprint%>%step_dummy(all_nominal(), -all_outcomes())
blueprint_prep <- prep(blueprint, training = train_data)
transformed_train<-(bake(blueprint_prep, new_data = train_data))
transformed_test<-(bake(blueprint_prep, new_data = test_data))
View(transformed_test)
runApp('Credit_Card_Fraud_Detection')
runApp('Credit_Card_Fraud_Detection')
runApp('Credit_Card_Fraud_Detection')
